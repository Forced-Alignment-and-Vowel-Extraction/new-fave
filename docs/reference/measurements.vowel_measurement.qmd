# measurements.vowel_measurement { #new_fave.measurements.vowel_measurement }

`measurements.vowel_measurement`



## Classes

| Name | Description |
| --- | --- |
| [SpeakerCollection](#new_fave.measurements.vowel_measurement.SpeakerCollection) | A class to represent the vowel system of all  |
| [VowelClass](#new_fave.measurements.vowel_measurement.VowelClass) | A class used to represent a vowel class. |
| [VowelClassCollection](#new_fave.measurements.vowel_measurement.VowelClassCollection) | A class for an entire vowel system. It is a subclass |
| [VowelMeasurement](#new_fave.measurements.vowel_measurement.VowelMeasurement) | A class used to represent a vowel measurment. |

### SpeakerCollection { #new_fave.measurements.vowel_measurement.SpeakerCollection }

`measurements.vowel_measurement.SpeakerCollection(self, track_list)`

A class to represent the vowel system of all 
speakers in a TextGrid. It is a subclass of `defaultdict`,
and can be keyed by the `(file_name, group_name)` tuple.

#### Parameters

| Name         | Type                                                               | Description                              | Default    |
|--------------|--------------------------------------------------------------------|------------------------------------------|------------|
| `track_list` | [list](`list`)\[[CandidateTracks](`fasttrackpy.CandidateTracks`)\] | A list of `fasttrackpy.CandidateTrack`s. | _required_ |

#### Methods

| Name | Description |
| --- | --- |
| [to_param_df](#new_fave.measurements.vowel_measurement.SpeakerCollection.to_param_df) | This will return a dataframe of the DCT parameters for all speakers. |
| [to_point_df](#new_fave.measurements.vowel_measurement.SpeakerCollection.to_point_df) | This will return a DataFrame of point measurements |
| [to_tracks_df](#new_fave.measurements.vowel_measurement.SpeakerCollection.to_tracks_df) | This will return a data frame of formant  |

##### to_param_df { #new_fave.measurements.vowel_measurement.SpeakerCollection.to_param_df }

`measurements.vowel_measurement.SpeakerCollection.to_param_df(output='log_param')`

This will return a dataframe of the DCT parameters for all speakers.
If `output` is passed `param`, it will be the DCT parameters in the
original Hz. If passed `log_param`, it will be the DCT parameters
over log(Hz).

###### Parameters

| Name     | Type                                                | Description                                                     | Default       |
|----------|-----------------------------------------------------|-----------------------------------------------------------------|---------------|
| `output` | [Literal](`typing.Literal`)\['param', 'log_param'\] | Which set of DCT parameters to return. Defaults to "log_param". | `'log_param'` |

###### Returns

| Type                                           | Description                                     |
|------------------------------------------------|-------------------------------------------------|
| [pl](`polars`).[DataFrame](`polars.DataFrame`) | A DataFrame of DCT parameters for all speakers. |

##### to_point_df { #new_fave.measurements.vowel_measurement.SpeakerCollection.to_point_df }

`measurements.vowel_measurement.SpeakerCollection.to_point_df()`

This will return a DataFrame of point measurements
for all speakers
Returns:
    (pl.DataFrame): A DataFrame of vowel point measurements.

##### to_tracks_df { #new_fave.measurements.vowel_measurement.SpeakerCollection.to_tracks_df }

`measurements.vowel_measurement.SpeakerCollection.to_tracks_df()`

This will return a data frame of formant 
tracks for all speakers.

###### Returns

| Type                                           | Description                                     |
|------------------------------------------------|-------------------------------------------------|
| [pl](`polars`).[DataFrame](`polars.DataFrame`) | A dataframe of formant tracks for all speakers. |

### VowelClass { #new_fave.measurements.vowel_measurement.VowelClass }

`measurements.vowel_measurement.VowelClass(self, label, tracks)`

A class used to represent a vowel class.

#### Parameters

| Name     | Type           | Description                 | Default    |
|----------|----------------|-----------------------------|------------|
| `label`  | [str](`str`)   | The vowel class label       | _required_ |
| `tracks` | [list](`list`) | A list of VowelMeasurements | _required_ |

Attributes:
    label (str): 
        label of the vowel class
    tracks (list): 
       A list of `VowelMeasurement`s
    vowel_system (VowelClassCollection):
        A the containing vowel system
    winners: 
        A list of winner OneTracks from
        the vowel class
    winner_params:
        An `np.array` of winner DCT parameters
        from the vowel class.

#### Methods

| Name | Description |
| --- | --- |
| [to_param_df](#new_fave.measurements.vowel_measurement.VowelClass.to_param_df) | Return DataFrame of formant DCT parameters. |
| [to_point_df](#new_fave.measurements.vowel_measurement.VowelClass.to_point_df) | Return a DataFrame of point measurements |

##### to_param_df { #new_fave.measurements.vowel_measurement.VowelClass.to_param_df }

`measurements.vowel_measurement.VowelClass.to_param_df(output='log_param')`

Return DataFrame of formant DCT parameters.

###### Returns

| Type                                           | Description                           |
|------------------------------------------------|---------------------------------------|
| [pl](`polars`).[DataFrame](`polars.DataFrame`) | A DataFrame of formant DCT parameters |

##### to_point_df { #new_fave.measurements.vowel_measurement.VowelClass.to_point_df }

`measurements.vowel_measurement.VowelClass.to_point_df()`

Return a DataFrame of point measurements

###### Returns

| Type                                           | Description                          |
|------------------------------------------------|--------------------------------------|
| [pl](`polars`).[DataFrame](`polars.DataFrame`) | A DataFrame of vowel point measures. |

### VowelClassCollection { #new_fave.measurements.vowel_measurement.VowelClassCollection }

`measurements.vowel_measurement.VowelClassCollection(self, track_list)`

A class for an entire vowel system. It is a subclass
of `defaultdict`, so it can be keyed by vowel class 
label

#### Parameters

| Name         | Type                  | Description                              | Default    |
|--------------|-----------------------|------------------------------------------|------------|
| `track_list` | list\[CandidateTracks | A list of `fasttrackpy.CandidateTrack`s. | _required_ |

#### Attributes

| Name                    | Type                                                                                             | Description                                                                                  |
|-------------------------|--------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------|
| maximum_formant_cov     | [np](`numpy`).[array](`numpy.array`)                                                             | The covariance matrix for the winners maximum formant across the entire vowel system         |
| maximum_formant_means   | [np](`numpy`).[array](`numpy.array`)                                                             | The mean maximum formant for the winners across the entire vowel system                      |
| max_formant_icov        | [np](`numpy`).[array](`numpy.array`)                                                             | The inverse covariance matrix for the winners maximum formant across the entire vowel system |
| params_covs             | [np](`numpy`).[array](`numpy.array`)                                                             | The covariance matrix for the winners' DCT parameters.                                       |
| params_icov             | [np](`numpy`).[array](`numpy.array`)                                                             | The inverse covariance matrix for the winners'  DCT parameters.                              |
| params_means            | [np](`numpy`).[array](`numpy.array`)                                                             | An `np.array` for the winners' DCT parameters in the entire vowel system.                    |
| vowel_measurements      | [list](`list`)\[[VowelMeasurement](`new_fave.measurements.vowel_measurement.VowelMeasurement`)\] | A list of all vowel measurements in the  vowel system                                        |
| winner_formants         | [np](`numpy`).[array](`numpy.array`)                                                             | An `np.array` for the formants  for the winners in the entire vowel system.                  |
| winner_params           | [np](`numpy`).[array](`numpy.array`)                                                             | An `np.array` of DCT parameters for the winners in entire vowel system.                      |
| winners                 | [list](`list`)\[[fasttrackpy](`fasttrackpy`).[OneTrack](`fasttrackpy.OneTrack`)\]                | The winning `fasttrackpy.OneTrack` for  the entire vowel system                              |
| winners_maximum_formant | [np](`numpy`).[array](`numpy.array`)                                                             | An `np.array` of the maximum formants for the winners in the entire vowel system             |

#### Methods

| Name | Description |
| --- | --- |
| [to_param_df](#new_fave.measurements.vowel_measurement.VowelClassCollection.to_param_df) | Return DataFrame of formant DCT parameters. |
| [to_point_df](#new_fave.measurements.vowel_measurement.VowelClassCollection.to_point_df) | Return a DataFrame of point measurements |
| [to_tracks_df](#new_fave.measurements.vowel_measurement.VowelClassCollection.to_tracks_df) | Return a DataFrame of the formant tracks |

##### to_param_df { #new_fave.measurements.vowel_measurement.VowelClassCollection.to_param_df }

`measurements.vowel_measurement.VowelClassCollection.to_param_df(output='log_param')`

Return DataFrame of formant DCT parameters.

###### Returns

| Type                                           | Description                           |
|------------------------------------------------|---------------------------------------|
| [pl](`polars`).[DataFrame](`polars.DataFrame`) | A DataFrame of formant DCT parameters |

##### to_point_df { #new_fave.measurements.vowel_measurement.VowelClassCollection.to_point_df }

`measurements.vowel_measurement.VowelClassCollection.to_point_df()`

Return a DataFrame of point measurements

###### Returns

| Type                                           | Description                          |
|------------------------------------------------|--------------------------------------|
| [pl](`polars`).[DataFrame](`polars.DataFrame`) | A DataFrame of vowel point measures. |

##### to_tracks_df { #new_fave.measurements.vowel_measurement.VowelClassCollection.to_tracks_df }

`measurements.vowel_measurement.VowelClassCollection.to_tracks_df()`

Return a DataFrame of the formant tracks

###### Returns

| Type                                           | Description                          |
|------------------------------------------------|--------------------------------------|
| [pl](`polars`).[DataFrame](`polars.DataFrame`) | A dataframe with formant track data. |

### VowelMeasurement { #new_fave.measurements.vowel_measurement.VowelMeasurement }

`measurements.vowel_measurement.VowelMeasurement(self, track, heuristic=Heuristic())`

A class used to represent a vowel measurment.

#### Parameters

| Name        | Type                                                                          | Description                                                     | Default       |
|-------------|-------------------------------------------------------------------------------|-----------------------------------------------------------------|---------------|
| `track`     | [fasttrackpy](`fasttrackpy`).[CandidateTracks](`fasttrackpy.CandidateTracks`) | A fasttrackpy.CandidateTrracks object                           | _required_    |
| `heuristic` | [Heuristic](`fave_measurement_point.heuristic.Heuristic`)                     | A point measurement Heuristic to use.  Defaults to Heuristic(). | `Heuristic()` |

#### Attributes

| Name                 | Type                                                               | Description                                                                                                            |
|----------------------|--------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------|
| track                | [CandidateTracks](`fasttrackpy.CandidateTracks`)                   | an object of CandidateTracks class                                                                                     |
| candidates           | [list](`list`)                                                     | list of candidates for the track                                                                                       |
| heuristic            | [Heuristic](`fave_measurement_point.heuristic.Heuristic`)          | an object of Heuristic class (default is Heuristic())                                                                  |
| vowel_class          | [VowelClass](`new_fave.measurements.vowel_measurement.VowelClass`) | The containing VowelClass object                                                                                       |
| formant_array        | [FormantArray](`fave_measurement_point.formants.FormantArray`)     | A FormantArray object                                                                                                  |
| file_name            | [str](`str`)                                                       | name of the file of the track                                                                                          |
| group                | [str](`str`)                                                       | TierGroup of the track                                                                                                 |
| id                   | [str](`str`)                                                       | id of the track                                                                                                        |
| interval             | [object](`object`)                                                 | interval of the track                                                                                                  |
| label                | [str](`str`)                                                       | label of the track                                                                                                     |
| n_formants           | [int](`int`)                                                       | number of formants in the track                                                                                        |
| winner               |                                                                    | fasttrackpy.OneTrack The winning formant track                                                                         |
| winner_index         | [int](`int`)                                                       | The index of the winning formant track                                                                                 |
| error_log_prob       | [np](`numpy`).[array](`numpy.array`)                               | A conversion of the log-mean-squared-error to a  log-probabilities, based on an empirical cumulative density function. |
| cand_errors          | [np](`numpy`).[array](`numpy.array`)                               | A numpy array of the log-mean-squared-errors for each candidate track.                                                 |
| cand_mahals          | [np](`numpy`).[array](`numpy.array`)                               | The mahalanobis distance across DCT parameters for each candidate from the vowel system  distribution.                 |
| cand_mahal_log_prob  | [np](`numpy`).[array](`numpy.array`)                               | A conversion of `cand_mahals` to log-probabilies.                                                                      |
| cand_max_formants    | [np](`numpy`).[array](`numpy.array`)                               | A numpy array of the maximum formants for this VowelMeasurement                                                        |
| cand_params          | [np](`numpy`).[array](`numpy.array`)                               | A numpy array of the candidate track  DCT parameters.                                                                  |
| max_formant_log_prob | [np](`numpy`).[array](`numpy.array`)                               | A conversion of `max_formant_mahal` to log-probabilities.                                                              |
| max_formant_mahal    | [np](`numpy`).[array](`numpy.array`)                               | The mahalanobis distance of each maximum formant to the speaker's entire distribution.                                 |
| point_measure        | [pl](`polars`).[DataFrame](`polars.DataFrame`)                     | A polars dataframe of the point measurement for this vowel.                                                            |
| vm_context           | [pl](`polars`).[DataFrame](`polars.DataFrame`)                     | A polars dataframe of contextual information for the vowel measurement.                                                |

#### Methods

| Name | Description |
| --- | --- |
| [to_param_df](#new_fave.measurements.vowel_measurement.VowelMeasurement.to_param_df) | Return DataFrame of formant DCT parameters. |
| [to_point_df](#new_fave.measurements.vowel_measurement.VowelMeasurement.to_point_df) | Return a DataFrame of point measurements |
| [to_tracks_df](#new_fave.measurements.vowel_measurement.VowelMeasurement.to_tracks_df) | Return a DataFrame of the formant tracks |

##### to_param_df { #new_fave.measurements.vowel_measurement.VowelMeasurement.to_param_df }

`measurements.vowel_measurement.VowelMeasurement.to_param_df(output='log_param')`

Return DataFrame of formant DCT parameters.

###### Returns

| Type                                           | Description                           |
|------------------------------------------------|---------------------------------------|
| [pl](`polars`).[DataFrame](`polars.DataFrame`) | A DataFrame of formant DCT parameters |

##### to_point_df { #new_fave.measurements.vowel_measurement.VowelMeasurement.to_point_df }

`measurements.vowel_measurement.VowelMeasurement.to_point_df()`

Return a DataFrame of point measurements

###### Returns

| Type                                           | Description                          |
|------------------------------------------------|--------------------------------------|
| [pl](`polars`).[DataFrame](`polars.DataFrame`) | A DataFrame of vowel point measures. |

##### to_tracks_df { #new_fave.measurements.vowel_measurement.VowelMeasurement.to_tracks_df }

`measurements.vowel_measurement.VowelMeasurement.to_tracks_df()`

Return a DataFrame of the formant tracks

###### Returns

| Type                                           | Description                          |
|------------------------------------------------|--------------------------------------|
| [pl](`polars`).[DataFrame](`polars.DataFrame`) | A dataframe with formant track data. |