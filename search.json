[
  {
    "objectID": "reference/new_fave.measurements.vowel_measurement.VowelClass.html",
    "href": "reference/new_fave.measurements.vowel_measurement.VowelClass.html",
    "title": "VowelClass",
    "section": "",
    "text": "measurements.vowel_measurement.VowelClass(self, label, tracks)\nA class used to represent a vowel class.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlabel\nstr\nThe vowel class label\nrequired\n\n\ntracks\nlist\nA list of VowelMeasurements\nrequired\n\n\n\nAttributes: label (str): label of the vowel class tracks (list): A list of VowelMeasurements vowel_system (VowelClassCollection): A the containing vowel system winners: A list of winner OneTracks from the vowel class winner_params: An np.array of winner DCT parameters from the vowel class.\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nto_param_df\nReturn DataFrame of formant DCT parameters.\n\n\nto_point_df\nReturn a DataFrame of point measurements\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClass.to_param_df(output='log_param')\nReturn DataFrame of formant DCT parameters.\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of formant DCT parameters\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClass.to_point_df()\nReturn a DataFrame of point measurements\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of vowel point measures."
  },
  {
    "objectID": "reference/new_fave.measurements.vowel_measurement.VowelClass.html#parameters",
    "href": "reference/new_fave.measurements.vowel_measurement.VowelClass.html#parameters",
    "title": "VowelClass",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nlabel\nstr\nThe vowel class label\nrequired\n\n\ntracks\nlist\nA list of VowelMeasurements\nrequired\n\n\n\nAttributes: label (str): label of the vowel class tracks (list): A list of VowelMeasurements vowel_system (VowelClassCollection): A the containing vowel system winners: A list of winner OneTracks from the vowel class winner_params: An np.array of winner DCT parameters from the vowel class."
  },
  {
    "objectID": "reference/new_fave.measurements.vowel_measurement.VowelClass.html#methods",
    "href": "reference/new_fave.measurements.vowel_measurement.VowelClass.html#methods",
    "title": "VowelClass",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nto_param_df\nReturn DataFrame of formant DCT parameters.\n\n\nto_point_df\nReturn a DataFrame of point measurements\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClass.to_param_df(output='log_param')\nReturn DataFrame of formant DCT parameters.\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of formant DCT parameters\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClass.to_point_df()\nReturn a DataFrame of point measurements\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of vowel point measures."
  },
  {
    "objectID": "reference/measurements.vowel_measurement.html",
    "href": "reference/measurements.vowel_measurement.html",
    "title": "measurements.vowel_measurement",
    "section": "",
    "text": "measurements.vowel_measurement\n\n\n\n\n\nName\nDescription\n\n\n\n\nSpeakerCollection\nA class to represent the vowel system of all\n\n\nVowelClass\nA class used to represent a vowel class.\n\n\nVowelClassCollection\nA class for an entire vowel system. It is a subclass\n\n\nVowelMeasurement\nA class used to represent a vowel measurment.\n\n\n\n\n\nmeasurements.vowel_measurement.SpeakerCollection(self, track_list)\nA class to represent the vowel system of all speakers in a TextGrid. It is a subclass of defaultdict, and can be keyed by the (file_name, group_name) tuple.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrack_list\nlist[CandidateTracks]\nA list of fasttrackpy.CandidateTracks.\nrequired\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nto_param_df\nThis will return a dataframe of the DCT parameters for all speakers.\n\n\nto_point_df\nThis will return a DataFrame of point measurements\n\n\nto_tracks_df\nThis will return a data frame of formant\n\n\n\n\n\nmeasurements.vowel_measurement.SpeakerCollection.to_param_df(output='log_param')\nThis will return a dataframe of the DCT parameters for all speakers. If output is passed param, it will be the DCT parameters in the original Hz. If passed log_param, it will be the DCT parameters over log(Hz).\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\noutput\nLiteral[‘param’, ‘log_param’]\nWhich set of DCT parameters to return. Defaults to “log_param”.\n'log_param'\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of DCT parameters for all speakers.\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.SpeakerCollection.to_point_df()\nThis will return a DataFrame of point measurements for all speakers Returns: (pl.DataFrame): A DataFrame of vowel point measurements.\n\n\n\nmeasurements.vowel_measurement.SpeakerCollection.to_tracks_df()\nThis will return a data frame of formant tracks for all speakers.\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA dataframe of formant tracks for all speakers.\n\n\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClass(self, label, tracks)\nA class used to represent a vowel class.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlabel\nstr\nThe vowel class label\nrequired\n\n\ntracks\nlist\nA list of VowelMeasurements\nrequired\n\n\n\nAttributes: label (str): label of the vowel class tracks (list): A list of VowelMeasurements vowel_system (VowelClassCollection): A the containing vowel system winners: A list of winner OneTracks from the vowel class winner_params: An np.array of winner DCT parameters from the vowel class.\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nto_param_df\nReturn DataFrame of formant DCT parameters.\n\n\nto_point_df\nReturn a DataFrame of point measurements\n\n\nto_tracks_df\nReturn DataFrame of formanttracks.\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClass.to_param_df(output='log_param')\nReturn DataFrame of formant DCT parameters.\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of formant DCT parameters\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClass.to_point_df()\nReturn a DataFrame of point measurements\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of vowel point measures.\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClass.to_tracks_df()\nReturn DataFrame of formanttracks.\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of formant tracks\n\n\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClassCollection(self, track_list)\nA class for an entire vowel system. It is a subclass of defaultdict, so it can be keyed by vowel class label\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrack_list\nlist[CandidateTracks\nA list of fasttrackpy.CandidateTracks.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nmaximum_formant_cov\nnp.array\nThe covariance matrix for the winners maximum formant across the entire vowel system\n\n\nmaximum_formant_means\nnp.array\nThe mean maximum formant for the winners across the entire vowel system\n\n\nmax_formant_icov\nnp.array\nThe inverse covariance matrix for the winners maximum formant across the entire vowel system\n\n\nparams_covs\nnp.array\nThe covariance matrix for the winners’ DCT parameters.\n\n\nparams_icov\nnp.array\nThe inverse covariance matrix for the winners’ DCT parameters.\n\n\nparams_means\nnp.array\nAn np.array for the winners’ DCT parameters in the entire vowel system.\n\n\nvowel_measurements\nlist[VowelMeasurement]\nA list of all vowel measurements in the vowel system\n\n\nwinner_formants\nnp.array\nAn np.array for the formants for the winners in the entire vowel system.\n\n\nwinner_params\nnp.array\nAn np.array of DCT parameters for the winners in entire vowel system.\n\n\nwinners\nlist[fasttrackpy.OneTrack]\nThe winning fasttrackpy.OneTrack for the entire vowel system\n\n\nwinners_maximum_formant\nnp.array\nAn np.array of the maximum formants for the winners in the entire vowel system\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nto_param_df\nReturn DataFrame of formant DCT parameters.\n\n\nto_point_df\nReturn a DataFrame of point measurements\n\n\nto_tracks_df\nReturn a DataFrame of the formant tracks\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClassCollection.to_param_df(output='log_param')\nReturn DataFrame of formant DCT parameters.\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of formant DCT parameters\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClassCollection.to_point_df()\nReturn a DataFrame of point measurements\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of vowel point measures.\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClassCollection.to_tracks_df()\nReturn a DataFrame of the formant tracks\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA dataframe with formant track data.\n\n\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelMeasurement(self, track, heuristic=Heuristic())\nA class used to represent a vowel measurment.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrack\nfasttrackpy.CandidateTracks\nA fasttrackpy.CandidateTrracks object\nrequired\n\n\nheuristic\nHeuristic\nA point measurement Heuristic to use. Defaults to Heuristic().\nHeuristic()\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ntrack\nCandidateTracks\nan object of CandidateTracks class\n\n\ncandidates\nlist\nlist of candidates for the track\n\n\nheuristic\nHeuristic\nan object of Heuristic class (default is Heuristic())\n\n\nvowel_class\nVowelClass\nThe containing VowelClass object\n\n\nformant_array\nFormantArray\nA FormantArray object\n\n\nfile_name\nstr\nname of the file of the track\n\n\ngroup\nstr\nTierGroup of the track\n\n\nid\nstr\nid of the track\n\n\ninterval\nobject\ninterval of the track\n\n\nlabel\nstr\nlabel of the track\n\n\nn_formants\nint\nnumber of formants in the track\n\n\nwinner\n\nfasttrackpy.OneTrack The winning formant track\n\n\nwinner_index\nint\nThe index of the winning formant track\n\n\nerror_log_prob\nnp.array\nA conversion of the log-mean-squared-error to a log-probabilities, based on an empirical cumulative density function.\n\n\ncand_errors\nnp.array\nA numpy array of the log-mean-squared-errors for each candidate track.\n\n\ncand_mahals\nnp.array\nThe mahalanobis distance across DCT parameters for each candidate from the vowel system distribution.\n\n\ncand_mahal_log_prob\nnp.array\nA conversion of cand_mahals to log-probabilies.\n\n\ncand_max_formants\nnp.array\nA numpy array of the maximum formants for this VowelMeasurement\n\n\ncand_params\nnp.array\nA numpy array of the candidate track DCT parameters.\n\n\nmax_formant_log_prob\nnp.array\nA conversion of max_formant_mahal to log-probabilities.\n\n\nmax_formant_mahal\nnp.array\nThe mahalanobis distance of each maximum formant to the speaker’s entire distribution.\n\n\npoint_measure\npl.DataFrame\nA polars dataframe of the point measurement for this vowel.\n\n\nvm_context\npl.DataFrame\nA polars dataframe of contextual information for the vowel measurement.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nto_param_df\nReturn DataFrame of formant DCT parameters.\n\n\nto_point_df\nReturn a DataFrame of point measurements\n\n\nto_tracks_df\nReturn a DataFrame of the formant tracks\n\n\n\n\n\nmeasurements.vowel_measurement.VowelMeasurement.to_param_df(output='log_param')\nReturn DataFrame of formant DCT parameters.\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of formant DCT parameters\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelMeasurement.to_point_df()\nReturn a DataFrame of point measurements\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of vowel point measures.\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelMeasurement.to_tracks_df()\nReturn a DataFrame of the formant tracks\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA dataframe with formant track data.",
    "crumbs": [
      "Vowel Measurements",
      "measurements.vowel_measurement"
    ]
  },
  {
    "objectID": "reference/measurements.vowel_measurement.html#classes",
    "href": "reference/measurements.vowel_measurement.html#classes",
    "title": "measurements.vowel_measurement",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nSpeakerCollection\nA class to represent the vowel system of all\n\n\nVowelClass\nA class used to represent a vowel class.\n\n\nVowelClassCollection\nA class for an entire vowel system. It is a subclass\n\n\nVowelMeasurement\nA class used to represent a vowel measurment.\n\n\n\n\n\nmeasurements.vowel_measurement.SpeakerCollection(self, track_list)\nA class to represent the vowel system of all speakers in a TextGrid. It is a subclass of defaultdict, and can be keyed by the (file_name, group_name) tuple.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrack_list\nlist[CandidateTracks]\nA list of fasttrackpy.CandidateTracks.\nrequired\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nto_param_df\nThis will return a dataframe of the DCT parameters for all speakers.\n\n\nto_point_df\nThis will return a DataFrame of point measurements\n\n\nto_tracks_df\nThis will return a data frame of formant\n\n\n\n\n\nmeasurements.vowel_measurement.SpeakerCollection.to_param_df(output='log_param')\nThis will return a dataframe of the DCT parameters for all speakers. If output is passed param, it will be the DCT parameters in the original Hz. If passed log_param, it will be the DCT parameters over log(Hz).\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\noutput\nLiteral[‘param’, ‘log_param’]\nWhich set of DCT parameters to return. Defaults to “log_param”.\n'log_param'\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of DCT parameters for all speakers.\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.SpeakerCollection.to_point_df()\nThis will return a DataFrame of point measurements for all speakers Returns: (pl.DataFrame): A DataFrame of vowel point measurements.\n\n\n\nmeasurements.vowel_measurement.SpeakerCollection.to_tracks_df()\nThis will return a data frame of formant tracks for all speakers.\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA dataframe of formant tracks for all speakers.\n\n\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClass(self, label, tracks)\nA class used to represent a vowel class.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlabel\nstr\nThe vowel class label\nrequired\n\n\ntracks\nlist\nA list of VowelMeasurements\nrequired\n\n\n\nAttributes: label (str): label of the vowel class tracks (list): A list of VowelMeasurements vowel_system (VowelClassCollection): A the containing vowel system winners: A list of winner OneTracks from the vowel class winner_params: An np.array of winner DCT parameters from the vowel class.\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nto_param_df\nReturn DataFrame of formant DCT parameters.\n\n\nto_point_df\nReturn a DataFrame of point measurements\n\n\nto_tracks_df\nReturn DataFrame of formanttracks.\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClass.to_param_df(output='log_param')\nReturn DataFrame of formant DCT parameters.\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of formant DCT parameters\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClass.to_point_df()\nReturn a DataFrame of point measurements\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of vowel point measures.\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClass.to_tracks_df()\nReturn DataFrame of formanttracks.\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of formant tracks\n\n\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClassCollection(self, track_list)\nA class for an entire vowel system. It is a subclass of defaultdict, so it can be keyed by vowel class label\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrack_list\nlist[CandidateTracks\nA list of fasttrackpy.CandidateTracks.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nmaximum_formant_cov\nnp.array\nThe covariance matrix for the winners maximum formant across the entire vowel system\n\n\nmaximum_formant_means\nnp.array\nThe mean maximum formant for the winners across the entire vowel system\n\n\nmax_formant_icov\nnp.array\nThe inverse covariance matrix for the winners maximum formant across the entire vowel system\n\n\nparams_covs\nnp.array\nThe covariance matrix for the winners’ DCT parameters.\n\n\nparams_icov\nnp.array\nThe inverse covariance matrix for the winners’ DCT parameters.\n\n\nparams_means\nnp.array\nAn np.array for the winners’ DCT parameters in the entire vowel system.\n\n\nvowel_measurements\nlist[VowelMeasurement]\nA list of all vowel measurements in the vowel system\n\n\nwinner_formants\nnp.array\nAn np.array for the formants for the winners in the entire vowel system.\n\n\nwinner_params\nnp.array\nAn np.array of DCT parameters for the winners in entire vowel system.\n\n\nwinners\nlist[fasttrackpy.OneTrack]\nThe winning fasttrackpy.OneTrack for the entire vowel system\n\n\nwinners_maximum_formant\nnp.array\nAn np.array of the maximum formants for the winners in the entire vowel system\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nto_param_df\nReturn DataFrame of formant DCT parameters.\n\n\nto_point_df\nReturn a DataFrame of point measurements\n\n\nto_tracks_df\nReturn a DataFrame of the formant tracks\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClassCollection.to_param_df(output='log_param')\nReturn DataFrame of formant DCT parameters.\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of formant DCT parameters\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClassCollection.to_point_df()\nReturn a DataFrame of point measurements\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of vowel point measures.\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClassCollection.to_tracks_df()\nReturn a DataFrame of the formant tracks\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA dataframe with formant track data.\n\n\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelMeasurement(self, track, heuristic=Heuristic())\nA class used to represent a vowel measurment.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrack\nfasttrackpy.CandidateTracks\nA fasttrackpy.CandidateTrracks object\nrequired\n\n\nheuristic\nHeuristic\nA point measurement Heuristic to use. Defaults to Heuristic().\nHeuristic()\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ntrack\nCandidateTracks\nan object of CandidateTracks class\n\n\ncandidates\nlist\nlist of candidates for the track\n\n\nheuristic\nHeuristic\nan object of Heuristic class (default is Heuristic())\n\n\nvowel_class\nVowelClass\nThe containing VowelClass object\n\n\nformant_array\nFormantArray\nA FormantArray object\n\n\nfile_name\nstr\nname of the file of the track\n\n\ngroup\nstr\nTierGroup of the track\n\n\nid\nstr\nid of the track\n\n\ninterval\nobject\ninterval of the track\n\n\nlabel\nstr\nlabel of the track\n\n\nn_formants\nint\nnumber of formants in the track\n\n\nwinner\n\nfasttrackpy.OneTrack The winning formant track\n\n\nwinner_index\nint\nThe index of the winning formant track\n\n\nerror_log_prob\nnp.array\nA conversion of the log-mean-squared-error to a log-probabilities, based on an empirical cumulative density function.\n\n\ncand_errors\nnp.array\nA numpy array of the log-mean-squared-errors for each candidate track.\n\n\ncand_mahals\nnp.array\nThe mahalanobis distance across DCT parameters for each candidate from the vowel system distribution.\n\n\ncand_mahal_log_prob\nnp.array\nA conversion of cand_mahals to log-probabilies.\n\n\ncand_max_formants\nnp.array\nA numpy array of the maximum formants for this VowelMeasurement\n\n\ncand_params\nnp.array\nA numpy array of the candidate track DCT parameters.\n\n\nmax_formant_log_prob\nnp.array\nA conversion of max_formant_mahal to log-probabilities.\n\n\nmax_formant_mahal\nnp.array\nThe mahalanobis distance of each maximum formant to the speaker’s entire distribution.\n\n\npoint_measure\npl.DataFrame\nA polars dataframe of the point measurement for this vowel.\n\n\nvm_context\npl.DataFrame\nA polars dataframe of contextual information for the vowel measurement.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nto_param_df\nReturn DataFrame of formant DCT parameters.\n\n\nto_point_df\nReturn a DataFrame of point measurements\n\n\nto_tracks_df\nReturn a DataFrame of the formant tracks\n\n\n\n\n\nmeasurements.vowel_measurement.VowelMeasurement.to_param_df(output='log_param')\nReturn DataFrame of formant DCT parameters.\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of formant DCT parameters\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelMeasurement.to_point_df()\nReturn a DataFrame of point measurements\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of vowel point measures.\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelMeasurement.to_tracks_df()\nReturn a DataFrame of the formant tracks\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA dataframe with formant track data.",
    "crumbs": [
      "Vowel Measurements",
      "measurements.vowel_measurement"
    ]
  },
  {
    "objectID": "reference/extract.html",
    "href": "reference/extract.html",
    "title": "extract",
    "section": "",
    "text": "extract\n\n\n\n\n\nName\nDescription\n\n\n\n\nfave_extract\nsummary\n\n\n\n\n\nextract.fave_extract(corpus_path, fasttrack_config, labelset_parser, recode_rules, measurement_points, **kwargs)\nsummary",
    "crumbs": [
      "Extract",
      "extract"
    ]
  },
  {
    "objectID": "reference/extract.html#functions",
    "href": "reference/extract.html#functions",
    "title": "extract",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nfave_extract\nsummary\n\n\n\n\n\nextract.fave_extract(corpus_path, fasttrack_config, labelset_parser, recode_rules, measurement_points, **kwargs)\nsummary",
    "crumbs": [
      "Extract",
      "extract"
    ]
  },
  {
    "objectID": "reference/new_fave.measurements.vowel_measurement.VowelMeasurement.html",
    "href": "reference/new_fave.measurements.vowel_measurement.VowelMeasurement.html",
    "title": "VowelMeasurement",
    "section": "",
    "text": "measurements.vowel_measurement.VowelMeasurement(self, track, heuristic=Heuristic())\nA class used to represent a vowel measurment.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrack\nfasttrackpy.CandidateTracks\nA fasttrackpy.CandidateTrracks object\nrequired\n\n\nheuristic\nHeuristic\nA point measurement Heuristic to use. Defaults to Heuristic().\nHeuristic()\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ntrack\nCandidateTracks\nan object of CandidateTracks class\n\n\ncandidates\nlist\nlist of candidates for the track\n\n\nheuristic\nHeuristic\nan object of Heuristic class (default is Heuristic())\n\n\nvowel_class\nVowelClass\nThe containing VowelClass object\n\n\nformant_array\nFormantArray\nA FormantArray object\n\n\nfile_name\nstr\nname of the file of the track\n\n\ngroup\nstr\nTierGroup of the track\n\n\nid\nstr\nid of the track\n\n\ninterval\nobject\ninterval of the track\n\n\nlabel\nstr\nlabel of the track\n\n\nn_formants\nint\nnumber of formants in the track\n\n\nwinner\n\nfasttrackpy.OneTrack The winning formant track\n\n\nwinner_index\nint\nThe index of the winning formant track\n\n\nerror_log_prob\nnp.array\nA conversion of the log-mean-squared-error to a log-probabilities, based on an empirical cumulative density function.\n\n\ncand_errors\nnp.array\nA numpy array of the log-mean-squared-errors for each candidate track.\n\n\ncand_mahals\nnp.array\nThe mahalanobis distance across DCT parameters for each candidate from the vowel system distribution.\n\n\ncand_mahal_log_prob\nnp.array\nA conversion of cand_mahals to log-probabilies.\n\n\ncand_max_formants\nnp.array\nA numpy array of the maximum formants for this VowelMeasurement\n\n\ncand_params\nnp.array\nA numpy array of the candidate track DCT parameters.\n\n\nmax_formant_log_prob\nnp.array\nA conversion of max_formant_mahal to log-probabilities.\n\n\nmax_formant_mahal\nnp.array\nThe mahalanobis distance of each maximum formant to the speaker’s entire distribution.\n\n\npoint_measure\npl.DataFrame\nA polars dataframe of the point measurement for this vowel.\n\n\nvm_context\npl.DataFrame\nA polars dataframe of contextual information for the vowel measurement.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nto_param_df\nReturn DataFrame of formant DCT parameters.\n\n\nto_point_df\nReturn a DataFrame of point measurements\n\n\nto_tracks_df\nReturn a DataFrame of the formant tracks\n\n\n\n\n\nmeasurements.vowel_measurement.VowelMeasurement.to_param_df(output='log_param')\nReturn DataFrame of formant DCT parameters.\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of formant DCT parameters\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelMeasurement.to_point_df()\nReturn a DataFrame of point measurements\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of vowel point measures.\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelMeasurement.to_tracks_df()\nReturn a DataFrame of the formant tracks\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA dataframe with formant track data."
  },
  {
    "objectID": "reference/new_fave.measurements.vowel_measurement.VowelMeasurement.html#parameters",
    "href": "reference/new_fave.measurements.vowel_measurement.VowelMeasurement.html#parameters",
    "title": "VowelMeasurement",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ntrack\nfasttrackpy.CandidateTracks\nA fasttrackpy.CandidateTrracks object\nrequired\n\n\nheuristic\nHeuristic\nA point measurement Heuristic to use. Defaults to Heuristic().\nHeuristic()"
  },
  {
    "objectID": "reference/new_fave.measurements.vowel_measurement.VowelMeasurement.html#attributes",
    "href": "reference/new_fave.measurements.vowel_measurement.VowelMeasurement.html#attributes",
    "title": "VowelMeasurement",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\ntrack\nCandidateTracks\nan object of CandidateTracks class\n\n\ncandidates\nlist\nlist of candidates for the track\n\n\nheuristic\nHeuristic\nan object of Heuristic class (default is Heuristic())\n\n\nvowel_class\nVowelClass\nThe containing VowelClass object\n\n\nformant_array\nFormantArray\nA FormantArray object\n\n\nfile_name\nstr\nname of the file of the track\n\n\ngroup\nstr\nTierGroup of the track\n\n\nid\nstr\nid of the track\n\n\ninterval\nobject\ninterval of the track\n\n\nlabel\nstr\nlabel of the track\n\n\nn_formants\nint\nnumber of formants in the track\n\n\nwinner\n\nfasttrackpy.OneTrack The winning formant track\n\n\nwinner_index\nint\nThe index of the winning formant track\n\n\nerror_log_prob\nnp.array\nA conversion of the log-mean-squared-error to a log-probabilities, based on an empirical cumulative density function.\n\n\ncand_errors\nnp.array\nA numpy array of the log-mean-squared-errors for each candidate track.\n\n\ncand_mahals\nnp.array\nThe mahalanobis distance across DCT parameters for each candidate from the vowel system distribution.\n\n\ncand_mahal_log_prob\nnp.array\nA conversion of cand_mahals to log-probabilies.\n\n\ncand_max_formants\nnp.array\nA numpy array of the maximum formants for this VowelMeasurement\n\n\ncand_params\nnp.array\nA numpy array of the candidate track DCT parameters.\n\n\nmax_formant_log_prob\nnp.array\nA conversion of max_formant_mahal to log-probabilities.\n\n\nmax_formant_mahal\nnp.array\nThe mahalanobis distance of each maximum formant to the speaker’s entire distribution.\n\n\npoint_measure\npl.DataFrame\nA polars dataframe of the point measurement for this vowel.\n\n\nvm_context\npl.DataFrame\nA polars dataframe of contextual information for the vowel measurement."
  },
  {
    "objectID": "reference/new_fave.measurements.vowel_measurement.VowelMeasurement.html#methods",
    "href": "reference/new_fave.measurements.vowel_measurement.VowelMeasurement.html#methods",
    "title": "VowelMeasurement",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nto_param_df\nReturn DataFrame of formant DCT parameters.\n\n\nto_point_df\nReturn a DataFrame of point measurements\n\n\nto_tracks_df\nReturn a DataFrame of the formant tracks\n\n\n\n\n\nmeasurements.vowel_measurement.VowelMeasurement.to_param_df(output='log_param')\nReturn DataFrame of formant DCT parameters.\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of formant DCT parameters\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelMeasurement.to_point_df()\nReturn a DataFrame of point measurements\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of vowel point measures.\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelMeasurement.to_tracks_df()\nReturn a DataFrame of the formant tracks\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA dataframe with formant track data."
  },
  {
    "objectID": "dev_plan/new-fave-approach.html",
    "href": "dev_plan/new-fave-approach.html",
    "title": "new-fave Approach",
    "section": "",
    "text": "Currently, I have a few classes and functions written up to allow for a hybrid fave-like and fasttrack-like formant track optimization.",
    "crumbs": [
      "Home",
      "Development Plan",
      "`new-fave` Approach"
    ]
  },
  {
    "objectID": "dev_plan/index.html",
    "href": "dev_plan/index.html",
    "title": "Development Plan",
    "section": "",
    "text": "The plan is for new-fave to be more opinionated about the input data stucture. fasttrackpy is more general purpose and therefore has its own design approach.\n\n\n\nThe plan is for new-fave to bring together, under one tool\n\nfave-recodeing of input data, allowing for dialect, language, or research question specific recoding of alignment output\nCustomizable point measurement heuristics\nEnriched data output enabled by its opinionated approach to data input. (e.g. fave-syllabify)\n\n\n\n\nSee New-Fave Approach",
    "crumbs": [
      "Home",
      "Development Plan"
    ]
  },
  {
    "objectID": "dev_plan/index.html#what-is-favey-about-this",
    "href": "dev_plan/index.html#what-is-favey-about-this",
    "title": "Development Plan",
    "section": "",
    "text": "The plan is for new-fave to be more opinionated about the input data stucture. fasttrackpy is more general purpose and therefore has its own design approach.\n\n\n\nThe plan is for new-fave to bring together, under one tool\n\nfave-recodeing of input data, allowing for dialect, language, or research question specific recoding of alignment output\nCustomizable point measurement heuristics\nEnriched data output enabled by its opinionated approach to data input. (e.g. fave-syllabify)\n\n\n\n\nSee New-Fave Approach",
    "crumbs": [
      "Home",
      "Development Plan"
    ]
  },
  {
    "objectID": "reference/optimize.optimize.html",
    "href": "reference/optimize.optimize.html",
    "title": "optimize.optimize",
    "section": "",
    "text": "optimize.optimize\n\n\n\n\n\nName\nDescription\n\n\n\n\noptimize_one_measure\nThis function optimizes a given vowel measurement based on the\n\n\noptimize_vowel_measures\nOptimize a list of VowelMeasurements.\n\n\n\n\n\noptimize.optimize.optimize_one_measure(vowel_measurement, optim_params=['cand_mahal', 'max_formant'])\nThis function optimizes a given vowel measurement based on the specified optimization parameters. The optimization parameters can include ‘cand_mahal’ and ‘max_formant’.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nvowel_measurement\nVowelMeasurement\nThe VowelMeasurement to optimize\nrequired\n\n\noptim_params\nlist[Literal[‘cand_mahal’, ‘max_formant’]]\nThe optimization parameters to use. Defaults to [“cand_mahal”, “max_formant”].\n['cand_mahal', 'max_formant']\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nint\nThe index of the winning candidate.\n\n\n\n\n\n\n\noptimize.optimize.optimize_vowel_measures(vowel_measurements, optim_params=['cand_mahal', 'max_formant'])\nOptimize a list of VowelMeasurements.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nvowel_measurements\nlist[VowelMeasurement]\nThe list of vowel measurements to optimize\nrequired\n\n\noptim_params\nlist[Literal[‘cand_mahal’, ‘max_formant’]]\nThe optimization parameters to use. Defaults to [“cand_mahal”, “max_formant”].\n['cand_mahal', 'max_formant']",
    "crumbs": [
      "Optimization",
      "optimize.optimize"
    ]
  },
  {
    "objectID": "reference/optimize.optimize.html#functions",
    "href": "reference/optimize.optimize.html#functions",
    "title": "optimize.optimize",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\noptimize_one_measure\nThis function optimizes a given vowel measurement based on the\n\n\noptimize_vowel_measures\nOptimize a list of VowelMeasurements.\n\n\n\n\n\noptimize.optimize.optimize_one_measure(vowel_measurement, optim_params=['cand_mahal', 'max_formant'])\nThis function optimizes a given vowel measurement based on the specified optimization parameters. The optimization parameters can include ‘cand_mahal’ and ‘max_formant’.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nvowel_measurement\nVowelMeasurement\nThe VowelMeasurement to optimize\nrequired\n\n\noptim_params\nlist[Literal[‘cand_mahal’, ‘max_formant’]]\nThe optimization parameters to use. Defaults to [“cand_mahal”, “max_formant”].\n['cand_mahal', 'max_formant']\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nint\nThe index of the winning candidate.\n\n\n\n\n\n\n\noptimize.optimize.optimize_vowel_measures(vowel_measurements, optim_params=['cand_mahal', 'max_formant'])\nOptimize a list of VowelMeasurements.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nvowel_measurements\nlist[VowelMeasurement]\nThe list of vowel measurements to optimize\nrequired\n\n\noptim_params\nlist[Literal[‘cand_mahal’, ‘max_formant’]]\nThe optimization parameters to use. Defaults to [“cand_mahal”, “max_formant”].\n['cand_mahal', 'max_formant']",
    "crumbs": [
      "Optimization",
      "optimize.optimize"
    ]
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "Extract\n\n\n\nextract\n\n\n\n\n\n\n\nFunctions for optimizing formant measurements\n\n\n\noptimize.optimize\n\n\n\n\n\n\n\nVowel Measurements\n\n\n\nmeasurements.vowel_measurement",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#extract",
    "href": "reference/index.html#extract",
    "title": "Function reference",
    "section": "",
    "text": "Extract\n\n\n\nextract",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#optimization",
    "href": "reference/index.html#optimization",
    "title": "Function reference",
    "section": "",
    "text": "Functions for optimizing formant measurements\n\n\n\noptimize.optimize",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#vowel-measurements",
    "href": "reference/index.html#vowel-measurements",
    "title": "Function reference",
    "section": "",
    "text": "Vowel Measurements\n\n\n\nmeasurements.vowel_measurement",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "reference/new_fave.measurements.vowel_measurement.VowelClassCollection.html",
    "href": "reference/new_fave.measurements.vowel_measurement.VowelClassCollection.html",
    "title": "VowelClassCollection",
    "section": "",
    "text": "measurements.vowel_measurement.VowelClassCollection(self, track_list)\nA class for an entire vowel system. It is a subclass of defaultdict, so it can be keyed by vowel class label\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrack_list\nlist[CandidateTracks\nA list of fasttrackpy.CandidateTracks.\nrequired\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nmaximum_formant_cov\nnp.array\nThe covariance matrix for the winners maximum formant across the entire vowel system\n\n\nmaximum_formant_means\nnp.array\nThe mean maximum formant for the winners across the entire vowel system\n\n\nmax_formant_icov\nnp.array\nThe inverse covariance matrix for the winners maximum formant across the entire vowel system\n\n\nparams_covs\nnp.array\nThe covariance matrix for the winners’ DCT parameters.\n\n\nparams_icov\nnp.array\nThe inverse covariance matrix for the winners’ DCT parameters.\n\n\nparams_means\nnp.array\nAn np.array for the winners’ DCT parameters in the entire vowel system.\n\n\nvowel_measurements\nlist[VowelMeasurement]\nA list of all vowel measurements in the vowel system\n\n\nwinner_formants\nnp.array\nAn np.array for the formants for the winners in the entire vowel system.\n\n\nwinner_params\nnp.array\nAn np.array of DCT parameters for the winners in entire vowel system.\n\n\nwinners\nlist[fasttrackpy.OneTrack]\nThe winning fasttrackpy.OneTrack for the entire vowel system\n\n\nwinners_maximum_formant\nnp.array\nAn np.array of the maximum formants for the winners in the entire vowel system\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nto_param_df\nReturn DataFrame of formant DCT parameters.\n\n\nto_point_df\nReturn a DataFrame of point measurements\n\n\nto_tracks_df\nReturn a DataFrame of the formant tracks\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClassCollection.to_param_df(output='log_param')\nReturn DataFrame of formant DCT parameters.\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of formant DCT parameters\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClassCollection.to_point_df()\nReturn a DataFrame of point measurements\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of vowel point measures.\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClassCollection.to_tracks_df()\nReturn a DataFrame of the formant tracks\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA dataframe with formant track data."
  },
  {
    "objectID": "reference/new_fave.measurements.vowel_measurement.VowelClassCollection.html#parameters",
    "href": "reference/new_fave.measurements.vowel_measurement.VowelClassCollection.html#parameters",
    "title": "VowelClassCollection",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ntrack_list\nlist[CandidateTracks\nA list of fasttrackpy.CandidateTracks.\nrequired"
  },
  {
    "objectID": "reference/new_fave.measurements.vowel_measurement.VowelClassCollection.html#attributes",
    "href": "reference/new_fave.measurements.vowel_measurement.VowelClassCollection.html#attributes",
    "title": "VowelClassCollection",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nmaximum_formant_cov\nnp.array\nThe covariance matrix for the winners maximum formant across the entire vowel system\n\n\nmaximum_formant_means\nnp.array\nThe mean maximum formant for the winners across the entire vowel system\n\n\nmax_formant_icov\nnp.array\nThe inverse covariance matrix for the winners maximum formant across the entire vowel system\n\n\nparams_covs\nnp.array\nThe covariance matrix for the winners’ DCT parameters.\n\n\nparams_icov\nnp.array\nThe inverse covariance matrix for the winners’ DCT parameters.\n\n\nparams_means\nnp.array\nAn np.array for the winners’ DCT parameters in the entire vowel system.\n\n\nvowel_measurements\nlist[VowelMeasurement]\nA list of all vowel measurements in the vowel system\n\n\nwinner_formants\nnp.array\nAn np.array for the formants for the winners in the entire vowel system.\n\n\nwinner_params\nnp.array\nAn np.array of DCT parameters for the winners in entire vowel system.\n\n\nwinners\nlist[fasttrackpy.OneTrack]\nThe winning fasttrackpy.OneTrack for the entire vowel system\n\n\nwinners_maximum_formant\nnp.array\nAn np.array of the maximum formants for the winners in the entire vowel system"
  },
  {
    "objectID": "reference/new_fave.measurements.vowel_measurement.VowelClassCollection.html#methods",
    "href": "reference/new_fave.measurements.vowel_measurement.VowelClassCollection.html#methods",
    "title": "VowelClassCollection",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nto_param_df\nReturn DataFrame of formant DCT parameters.\n\n\nto_point_df\nReturn a DataFrame of point measurements\n\n\nto_tracks_df\nReturn a DataFrame of the formant tracks\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClassCollection.to_param_df(output='log_param')\nReturn DataFrame of formant DCT parameters.\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of formant DCT parameters\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClassCollection.to_point_df()\nReturn a DataFrame of point measurements\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA DataFrame of vowel point measures.\n\n\n\n\n\n\n\nmeasurements.vowel_measurement.VowelClassCollection.to_tracks_df()\nReturn a DataFrame of the formant tracks\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npl.DataFrame\nA dataframe with formant track data."
  }
]